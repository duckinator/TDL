/*
 * core.tdl - Copyright (c) 2010 Nick Markwell
 *
 * Core definitions of TDL
 *
 * Predefined objects/events are in the "Predefined" object
 *
 * We use builtins where the alternatives are provided, unless we know
 * 100% for sure that they will be available.
 *
 * ie: `Ground` is defined last since it relies on everything else in this file,
 *     so we can not use `Ground print(...)` but must use `__print__(...)` instead
 */

// `Predefined argument` is a predefined object
Argument: Predefined argument {
  call!: Event {
    this = this call()
  }
}

// `Predefined null` is a predefined object
null: Predefined null {
  __clone__: Predefined clone
  clone: Event {
    this __clone__()
  }

  ==: Event(other) {
    other null?()
  }

  !=: Event(other) {
    other null?() negate()
  }

  print: Event {
    Predefined print("")
  }

  println: Event {
    Predefined print("\n")
  }

  inspect: Event {
    "null"
  }

  !: Event { true }
  true?:  Event { false }
  false?: Event { true }
  null?:  Event { true }
}

// Now we add everything in `true` that uses `true` or `false`
True {
  !: Event { false }
  true?:  Event { true }
  false?: Event { false }
  null?:  Event { false }
}

// Now we add everything in `true` that uses `true` or `false`
False {
  !: Event { true }
  true?:  Event { false }
  false?: Event { true }
  null?:  Event { false }
}

/* `Object` is a clone of `True` because there's no use redefining
 *  everything `True` already defined as exactly the same values
 */
Object: True {
  __clone__: Predefined clone
  clone: Event {
    this __clone__()
  }

  =: Event(other) {
    this = other clone()
  }

  ==: Event(other) {
    // Yea I'm not entirely sure about this
    if(other name == this name || other parent == this name) {
      true
    } else {
      false
    }
  }

  !=: Event(other) {
    !(this == other)
  }

  id = __id__
  name = __name__

  print: Event {
    this inspect()
  }

  inspect: Event {
    Predefined print("#<")
    Predefined print(this name)
    Predefined print(":")
    Predefined print(this id)
    Predefined print(">")
  }
}

// Add more events to `true`
true {
  ==: Event(other) { other true?() }
  !=: Event(other) { other false?() }
  |: Event(other) { this }
  &: Event(other) { other true?() }
}

// Add more events to `false`
false {
  ==: Event(other) { other false?() }
  !=: Event(other) { other true?() }
  |: Event(other) { other true?() }
  &: Event(other) { this }
}

Ground: Object {
  print: Predefined print

  while: Predefined while
  if:    Predefined if
}

// String literals
String: Object {
  size: Event {
    Predefined string_size(this)
  }

  escape: Event {
    Predefined string_escape(this)
  }

  inspect: {
    "\"" + this escape() + "\""
  }

  +: Event(other) {
    Predefined string_concat(this, other)
  }

  +=: Event(other) {
    this = this + other
  }

  sub: Event(current, other) {
    Predefined string_replace(this, current, other, false)
  }

  gsub: Event(current, other) {
    Predefined string_replace(this, current, other, true)
  }

  sub!: Event(current, other) {
    this = this sub(current, other)
  }

  gsub!: Event(current, other) {
    this = this gsub(current, other)
  }

  []: Event(position) {
    Predefined substring(this, position)
  }

  []=: Event(position, value) {
    Predefined substring_replace(this, position, value)
  }

  eachLetter: Construct(block) {
    0 upto(this size(), |i|
      block call(this[i])
    )
  }
}

// Number literals
Number: Object {
  +: Event(other) {
    Predefined add(this, other)
  }

  -: Event(other) {
    Predefined subtract(this, other)
  }

  *: Event(other) {
    Predefined multiply(this, other)
  }

  /: Event(other) {
    Predefined divide(this, other)
  }

  %: Event(other) {
    Predefined modulo(this, other)
  }

  **: Event(other) {
    Predefined pow(this, other)
  }

  <<: Event(other) {
    Predefined left_shift(this, other)
  }

  >>: Event(other) {
    Predefined right_shift(this, other)
  }

  &: Event(other) {
    Predefined bitwise_and(this, other)
  }

  |: Event(other) {
    Predefined bitwise_or(this, other)
  }

  ^: Event(other) {
    Predefined bitwise_xor(this, other)
  }

  +=: Event(other) {
    this = this + other
  }

  -=: Event(other) {
    this = this - other
  }

  *=: Event(other) {
    this = this * other
  }

  /=: Event(other) {
    this = this / other
  }

  %=: Event(other) {
    this = this % other
  }

  **=: Event(other) {
    this = this ** other
  }

  <<=: Event(other) {
    this = this << other
  }

  >>=: Event(other) {
    this = this >> other
  }

  &=: Event(other) {
    this = this & other
  }

  |=: Event(other) {
    this = this | other
  }

  ^=: Event(other) {
    this = this ^ other
  }

  <=>: Event(other) {
    Predefined lt_gt_equal(this, other)
  }

  <: Event(other) {
    (this <=> other == -1)
  }

  ==: Event(other) {
    (this <=> other == 0)
  }

  >: Event(other) {
    (this <=> other == 1)
  }

  <=: Event(other) {
    (this < other || this == other)
  }

  >=: Event(other) {
    (this > other || this == other)
  }

  ~: Event {
    if(this floor() != this) {
      null
    } else {
      if(this < 0) {
        this negate() - 1
      } else if(this > 0) {
        this negate() + 1
      } else {
        -1
      }
    }
  }

  negate: Event {
    this - this - this // Yes, seriously
  }

  zero?: Event {
    (this == 0)
  }

  odd?: Event {
    (this % 2 == 1)
  }

  even?: Event {
    (this % 2 == 0)
  }

  abs: Event {
    if(this < 0) {
      this negate()
    } else {
      this
    }
  }

  floor: Event {
    __number_floor__(this)
  }

  ceil: Event {
    if(this floor() < this) {
      this floor() + 1
    } else {
      this floor()
    }
  }

  toString: Event {
    this __number_to_string__()
  }

  inspect: Event {
    this toString()
  }

  upto: Construct(other, block) {
    i: this
    while(i < other) {
      block call(i)
      i += 1
    }
  }

  downto: Construct(other, block) {
    i: this
    while(i > other) {
      block call(i)
      i -= 1
    }
  }

  to: Construct(other, block) {
    if(this < other) {
      this upto(other, block)
    } else if(this > other) {
      this downto(other, block)
    }
  }
}

// Hash literals
Hash: Object {
  []: Event(i) {
    this __hash_get__(i)
  }

  []=: Event(i, value) {
    this __hash_set__(i, value)
  }

  size: Event {
    this __hash_size__()
  }

  inspect: Event {
    tmp = "["
    i = 0
    this each { |k, v|
      tmp += k inspect()
      tmp += ": "
      tmp += v inspect()

      i += 1
      if(i < (this size() - 1)) {
        tmp += ", "
      }
    }
    tmp += "]"
  }

  each: Construct(block) {
    __hash_each__(block)
  }
}

// Array literals
Array: Hash {
  inspect: Event {
    tmp = "["
    this each { |i, v|
      tmp += v inspect()

      if(i < (this size() - 1)) {
        tmp += ", "
      }
    }
    tmp += "]"
  }
}
